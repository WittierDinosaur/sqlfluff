# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 42041c6463ebf05892ce933b210a0a46e3c7818714173ff4608e81655c4f37f2
file:
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: EXTERNAL
      - keyword: TABLE
      - raw: IF
      - raw: NOT
      - raw: EXISTS
      - raw: table_identifier
      - bracketed:
        - start_bracket: (
        - raw: col_name1
        - raw: STRING
        - raw: COMMENT
        - raw: '"col_comment1"'
        - end_bracket: )
      - raw: COMMENT
      - raw: '"table_comment"'
      - raw: PARTITIONED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: col_name2
        - raw: STRING
        - raw: COMMENT
        - raw: '"col_comment2"'
        - end_bracket: )
      - raw: CLUSTERED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: col_name1
        - comma: ','
        - raw: col_name2
        - end_bracket: )
      - raw: SORTED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: col_name1
        - raw: ASC
        - comma: ','
        - raw: col_name2
        - raw: DESC
        - end_bracket: )
      - raw: INTO
      - raw: '3'
      - raw: BUCKETS
      - raw: ROW
      - raw: FORMAT
      - raw: DELIMITED
      - raw: FIELDS
      - raw: TERMINATED
      - raw: BY
      - raw: "','"
      - raw: STORED
      - raw: AS
      - raw: PARQUET
      - raw: LOCATION
      - raw: '"path/to/files"'
      - raw: TBLPROPERTIES
      - bracketed:
        - start_bracket: (
        - raw: '"key1"'
        - raw: '='
        - raw: '"val1"'
        - comma: ','
        - raw: '"key2"'
        - raw: '='
        - raw: '"val2"'
        - end_bracket: )
      - raw: AS
      - bracketed:
        - start_bracket: (
        - raw: SELECT
        - raw: '*'
        - raw: FROM
        - raw: table_identifier
        - end_bracket: )
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: student
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: student_name
        - raw: STRING
        - comma: ','
        - raw: age
        - raw: INT
        - end_bracket: )
      - raw: STORED
      - raw: AS
      - raw: ORC
- statement_terminator: ;
- base:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: student_copy
    - keyword: STORED
    - keyword: AS
    - keyword: ORC
    - keyword: AS
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: student
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: student
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: student_name
        - raw: STRING
        - comma: ','
        - raw: age
        - raw: INT
        - end_bracket: )
      - raw: COMMENT
      - raw: "'this is a comment'"
      - raw: STORED
      - raw: AS
      - raw: ORC
      - raw: TBLPROPERTIES
      - bracketed:
        - start_bracket: (
        - raw: "'foo'"
        - raw: '='
        - raw: "'bar'"
        - end_bracket: )
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: student
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: student_name
        - raw: STRING
        - comma: ','
        - raw: age
        - raw: INT
        - end_bracket: )
      - raw: STORED
      - raw: AS
      - raw: ORC
      - raw: TBLPROPERTIES
      - bracketed:
        - start_bracket: (
        - raw: "'foo'"
        - raw: '='
        - raw: "'bar'"
        - end_bracket: )
      - raw: COMMENT
      - raw: "'this is a comment'"
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: student
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: student_name
        - raw: STRING
        - end_bracket: )
      - raw: PARTITIONED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: age
        - raw: INT
        - end_bracket: )
      - raw: STORED
      - raw: AS
      - raw: ORC
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: student
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: student_name
        - raw: STRING
        - end_bracket: )
      - raw: STORED
      - raw: AS
      - raw: ORC
      - raw: PARTITIONED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: age
        - raw: INT
        - end_bracket: )
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: student
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: student_name
        - raw: STRING
        - end_bracket: )
      - raw: ROW
      - raw: FORMAT
      - raw: DELIMITED
      - raw: FIELDS
      - raw: TERMINATED
      - raw: BY
      - raw: "','"
      - raw: STORED
      - raw: AS
      - raw: TEXTFILE
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: EXTERNAL
      - keyword: TABLE
      - raw: family
      - bracketed:
        - start_bracket: (
        - raw: student_name
        - raw: STRING
        - comma: ','
        - raw: friends
        - raw: ARRAY
        - raw: <
        - raw: STRING
        - raw: '>'
        - comma: ','
        - raw: children
        - raw: MAP
        - raw: <
        - raw: STRING
        - comma: ','
        - raw: INT
        - raw: '>'
        - comma: ','
        - raw: address
        - raw: STRUCT
        - raw: <
        - raw: street
        - raw: ':'
        - raw: STRING
        - comma: ','
        - raw: city
        - raw: ':'
        - raw: STRING
        - raw: '>'
        - end_bracket: )
      - raw: ROW
      - raw: FORMAT
      - raw: DELIMITED
      - raw: FIELDS
      - raw: TERMINATED
      - raw: BY
      - raw: "','"
      - raw: ESCAPED
      - raw: BY
      - raw: "'\\\\'"
      - raw: COLLECTION
      - raw: ITEMS
      - raw: TERMINATED
      - raw: BY
      - raw: "'_'"
      - raw: MAP
      - raw: KEYS
      - raw: TERMINATED
      - raw: BY
      - raw: "':'"
      - raw: LINES
      - raw: TERMINATED
      - raw: BY
      - raw: "'\\n'"
      - raw: 'NULL'
      - raw: DEFINED
      - raw: AS
      - raw: "'foonull'"
      - raw: STORED
      - raw: AS
      - raw: TEXTFILE
      - raw: LOCATION
      - raw: "'/tmp/family/'"
- statement_terminator: ;
- base:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: avroexample
    - row_format_clause:
      - keyword: ROW
      - keyword: FORMAT
      - keyword: SERDE
      - literal: "'org.apache.hadoop.hive.serde2.avro.AvroSerDe'"
    - keyword: STORED
    - keyword: AS
    - keyword: INPUTFORMAT
    - literal: "'org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat'"
    - keyword: OUTPUTFORMAT
    - literal: "'org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat'"
    - unparsable:
        raw: TBLPROPERTIES
        bracketed:
        - start_bracket: (
        - raw: "'avro.schema.literal'"
        - raw: '='
        - raw: "'{\"namespace\": \"org.apache.hive\", \"name\": \"first_schema\",\
            \ \"type\": \"record\", \"fields\": [ { \"name\":\"string1\", \"type\"\
            :\"string\" }, { \"name\":\"string2\", \"type\":\"string\" }] }'"
        - end_bracket: )
- statement_terminator: ;
- base:
    add_executable_package:
      keyword: ADD
      file_type: JAR
      literal: "'/tmp/hive_serde_example.jar'"
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: EXTERNAL
      - keyword: TABLE
      - raw: family
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: family_name
        - raw: STRING
        - end_bracket: )
      - raw: ROW
      - raw: FORMAT
      - raw: SERDE
      - raw: "'com.ly.spark.serde.SerDeExample'"
      - raw: STORED
      - raw: AS
      - raw: INPUTFORMAT
      - raw: "'com.ly.spark.example.serde.io.SerDeExampleInputFormat'"
      - raw: OUTPUTFORMAT
      - raw: "'com.ly.spark.example.serde.io.SerDeExampleOutputFormat'"
      - raw: LOCATION
      - raw: "'/tmp/family/'"
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: clustered_by_test1
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: age
        - raw: STRING
        - end_bracket: )
      - raw: CLUSTERED
      - raw: BY
      - bracketed:
          start_bracket: (
          raw: id
          end_bracket: )
      - raw: INTO
      - raw: '4'
      - raw: BUCKETS
      - raw: STORED
      - raw: AS
      - raw: ORC
- statement_terminator: ;
- base:
    create_table_statement:
      unparsable:
      - keyword: CREATE
      - keyword: TABLE
      - raw: clustered_by_test2
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: INT
        - comma: ','
        - raw: test_name
        - raw: STRING
        - end_bracket: )
      - raw: PARTITIONED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: test_year
        - raw: STRING
        - end_bracket: )
      - raw: CLUSTERED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: id
        - comma: ','
        - raw: name
        - end_bracket: )
      - raw: SORTED
      - raw: BY
      - bracketed:
        - start_bracket: (
        - raw: id
        - raw: ASC
        - end_bracket: )
      - raw: INTO
      - raw: '3'
      - raw: BUCKETS
      - raw: STORED
      - raw: AS
      - raw: PARQUET
- statement_terminator: ;
