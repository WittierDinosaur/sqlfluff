# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: a058c12bd6fd8283df37f3dff81f87410adfefcf3d2e98e5033ac07ddacd55f7
file:
  statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
            identifier: value
          alias_expression:
            keyword: as
            identifier: p_id
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: name
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: iff
          unparsable:
          - bracketed:
            - start_bracket: (
            - raw: rank
            - bracketed:
                start_bracket: (
                end_bracket: )
            - raw: over
            - bracketed:
              - start_bracket: (
              - raw: partition
              - raw: by
              - raw: id
              - raw: order
              - raw: by
              - raw: t_id
              - raw: desc
              - end_bracket: )
            - raw: '='
            - raw: '1'
            - comma: ','
            - raw: 'true'
            - comma: ','
            - raw: 'false'
            - end_bracket: )
          - raw: as
          - raw: most_recent
      from_clause:
      - keyword: from
      - from_expression:
          from_expression_element:
            table_expression:
              path:
                identifier: a
          join_clause:
          - keyword: inner
          - keyword: join
          - from_expression_element:
              table_expression:
                path:
                  identifier: b
          - join_on_condition:
              keyword: 'on'
              bracketed:
                start_bracket: (
                expression:
                - column_reference:
                  - identifier: b
                  - dot: .
                  - identifier: c_id
                - comparison_operator: '='
                - column_reference:
                  - identifier: a
                  - dot: .
                  - identifier: c_id
                end_bracket: )
      - comma: ','
      - from_expression:
          from_expression_element:
            keyword: lateral
            table_expression:
              function:
                function_name:
                  function_name_identifier: flatten
                bracketed:
                  start_bracket: (
                  snowflake_keyword_expression:
                    parameter: input
                    parameter_assigner: =>
                    column_reference:
                    - identifier: b
                    - dot: .
                    - identifier: cool_ids
                  end_bracket: )
