# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: d9a1af06030cc5021182ea19b280734ada63c8deb84fb6b986f711aaa46cae89
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              path:
                identifier: my_tbl
        unparsable:
        - raw: PIVOT
        - bracketed:
          - start_bracket: (
          - raw: min
          - bracketed:
              start_bracket: (
              raw: f_val
              end_bracket: )
          - raw: FOR
          - raw: f_id
          - raw: IN
          - bracketed:
            - start_bracket: (
            - raw: '1'
            - comma: ','
            - raw: '2'
            - end_bracket: )
          - end_bracket: )
        - raw: AS
        - raw: f
        - bracketed:
          - start_bracket: (
          - raw: a
          - comma: ','
          - raw: b
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              path:
                identifier: my_tbl
        unparsable:
          raw: UNPIVOT
          bracketed:
          - start_bracket: (
          - raw: val
          - raw: FOR
          - raw: col_name
          - raw: IN
          - bracketed:
            - start_bracket: (
            - raw: a
            - comma: ','
            - raw: b
            - end_bracket: )
          - end_bracket: )
- statement_terminator: ;
