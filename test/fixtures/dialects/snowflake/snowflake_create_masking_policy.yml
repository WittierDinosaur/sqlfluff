# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 9f37a557c8b5f903b8c5e7a7496009bb74c5f5ab6d801f6f13f256d79a1cdf1c
file:
- statement:
    create_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: MASKING
    - keyword: POLICY
    - object_reference:
      - identifier: XXXX
      - dot: .
      - identifier: XX
      - dot: .
      - identifier: example_MASKING_POLICY
    - keyword: AS
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: VARCHAR
      - end_bracket: )
    - raw: RETURNS
    - raw: VARCHAR
    - raw: ->
    - raw: CASE
    - raw: WHEN
    - raw: is_role_in_session
    - bracketed:
        start_bracket: (
        raw: "'SNOWFLAKE_PII'"
        end_bracket: )
    - raw: THEN
    - raw: val
    - raw: ELSE
    - raw: "'*** masked ***'"
    - raw: END
    - raw: COMMENT
    - raw: '='
    - raw: "'Applied 2021-07-13T03:12:16+0000'"
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: "'*********'"
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_account
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'<prod_account_identifier>'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: "'*********'"
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: IN
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: 'NULL'
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: "'********'"
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: sha2
    - bracketed:
        start_bracket: (
        raw: val
        end_bracket: )
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'SUPPORT'"
        end_bracket: )
    - raw: then
    - raw: regexp_replace
    - bracketed:
      - start_bracket: (
      - raw: val
      - comma: ','
      - raw: "'.+\\@'"
      - comma: ','
      - raw: "'*****@'"
      - end_bracket: )
    - raw: else
    - raw: "'********'"
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'SUPPORT'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: date_from_parts
    - bracketed:
      - start_bracket: (
      - raw: '0001'
      - comma: ','
      - raw: '01'
      - comma: ','
      - raw: '01'
      - end_bracket: )
    - raw: '::'
    - raw: timestamp_ntz
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: mask_udf
    - bracketed:
        start_bracket: (
        raw: val
        end_bracket: )
    - raw: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: val
      - raw: string
      - end_bracket: )
    - raw: returns
    - raw: string
    - raw: ->
    - raw: case
    - raw: when
    - raw: current_role
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: in
    - bracketed:
        start_bracket: (
        raw: "'ANALYST'"
        end_bracket: )
    - raw: then
    - raw: val
    - raw: else
    - raw: object_insert
    - bracketed:
      - start_bracket: (
      - raw: val
      - comma: ','
      - raw: "'USER_IPADDRESS'"
      - comma: ','
      - raw: "'****'"
      - comma: ','
      - raw: 'true'
      - end_bracket: )
    - raw: end
- statement_terminator: ;
