# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 2a37430df1692b36ec79f064877c109bb1b733afdbf1db999406c4a6a99996f5
file:
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - identifier: file_format
    - comparison_operator: '='
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: type
      - raw: '='
      - raw: csv
      - end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - identifier: file_format
    - comparison_operator: '='
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: format_name
      - raw: '='
      - raw: "'mycsv'"
      - end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - identifier: file_format
    - comparison_operator: '='
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: type
      - raw: '='
      - raw: "'CSV'"
      - end_bracket: )
    - raw: pattern
    - raw: '='
    - raw: "'.*/.*/.*[.]csv[.]gz'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - identifier: file_format
    - comparison_operator: '='
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: format_name
      - raw: '='
      - raw: myformat
      - end_bracket: )
    - raw: pattern
    - raw: '='
    - raw: "'.*sales.*[.]csv'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - identifier: purge
    - comparison_operator: '='
    - identifier: 'true'
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - identifier: validation_mode
    - comparison_operator: '='
    - literal: "'RETURN_ERRORS'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - identifier: validation_mode
    - comparison_operator: '='
    - literal: "'RETURN_2_ROWS'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable
    - identifier: validation_mode
    - comparison_operator: '='
    - literal: "'RETURN_3_ROWS'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: COPY
    - keyword: INTO
    - table_reference:
        identifier: target_table
    unparsable:
      raw: FROM
      bracketed:
      - start_bracket: (
      - raw: SELECT
      - raw: $1
      - raw: FROM
      - raw: '@'
      - raw: source_stage
      - end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable1
    unparsable:
    - bracketed:
        start_bracket: (
        raw: column1
        end_bracket: )
    - raw: from
    - raw: "'s3://bucket/source'"
    - raw: file_format
    - raw: '='
    - bracketed:
      - start_bracket: (
      - raw: TYPE
      - raw: '='
      - raw: JSON
      - end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable1
    unparsable:
    - raw: from
    - bracketed:
      - start_bracket: (
      - raw: select
      - raw: column1
      - raw: from
      - raw: '@'
      - raw: ext
      - raw: .
      - raw: stage
      - raw: /
      - raw: path1
      - end_bracket: )
    - raw: file_format
    - raw: '='
    - bracketed:
      - start_bracket: (
      - raw: TYPE
      - raw: '='
      - raw: JSON
      - end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - table_reference:
        identifier: mytable1
    - keyword: from
    - literal: "'s3://bucket/source'"
    - identifier: file_format
    - comparison_operator: '='
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: type
      - raw: '='
      - raw: csv
      - raw: SKIP_HEADER
      - raw: '='
      - raw: '1'
      - end_bracket: )
- statement_terminator: ;
