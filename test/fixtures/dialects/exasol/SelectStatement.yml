# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 436f16bd14b71e87a77a4e00fb34849c226cde087d5124d65fdd5a3c433c24b1
file:
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: last_name
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: employee_id
          alias_expression:
            identifier: id
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: manager_id
          alias_expression:
            identifier: mgr_id
      - comma: ','
      - select_clause_element:
          bare_function: CONNECT_BY_ISLEAF
          alias_expression:
            identifier: leaf
      - comma: ','
      - select_clause_element:
          bare_function: LEVEL
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: LPAD
          unparsable:
          - bracketed:
            - start_bracket: (
            - raw: "' '"
            - comma: ','
            - raw: '2'
            - raw: '*'
            - raw: LEVEL
            - raw: '-'
            - raw: '1'
            - end_bracket: )
          - raw: '||'
          - raw: SYS_CONNECT_BY_PATH
          - bracketed:
            - start_bracket: (
            - raw: last_name
            - comma: ','
            - raw: "'/'"
            - end_bracket: )
          - raw: '"PATH"'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: employees
      connect_by_clause:
      - keyword: CONNECT
      - keyword: BY
      - expression:
        - keyword: PRIOR
        - column_reference:
            identifier: employee_id
        - comparison_operator: '='
        - column_reference:
            identifier: manager_id
        - binary_operator: AND
        - column_reference:
            identifier: dept_no
        - comparison_operator: '='
        - column_reference:
            identifier: dno
      - keyword: START
      - keyword: WITH
      - expression:
          column_reference:
            identifier: last_name
          comparison_operator: '='
          literal: "'Clark'"
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - column_reference:
          identifier: employee_id
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: store
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: SUM
          unparsable:
          - bracketed:
              start_bracket: (
              raw: price
              end_bracket: )
          - raw: AS
          - raw: volume
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sales
      group_by_clause:
      - keyword: GROUP
      - keyword: BY
      - column_reference:
          identifier: store
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - column_reference:
          identifier: store
      - keyword: DESC
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: name
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: SUM
          unparsable:
          - bracketed:
              start_bracket: (
              raw: price
              end_bracket: )
          - raw: AS
          - raw: volume
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: customers
          join_clause:
            keyword: JOIN
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: sales
        unparsable:
          raw: USING
          bracketed:
            start_bracket: (
            raw: c_id
            end_bracket: )
      group_by_clause:
      - keyword: GROUP
      - keyword: BY
      - column_reference:
          identifier: name
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - column_reference:
          identifier: name
- statement_terminator: ;
- statement:
    with_compound_statement:
      unparsable:
      - keyword: WITH
      - raw: tmp_view
      - raw: AS
      - bracketed:
        - start_bracket: (
        - raw: SELECT
        - raw: name
        - comma: ','
        - raw: price
        - comma: ','
        - raw: store
        - raw: FROM
        - raw: customers
        - comma: ','
        - raw: sales
        - raw: WHERE
        - raw: customers
        - raw: .
        - raw: c_id
        - raw: '='
        - raw: sales
        - raw: .
        - raw: c_id
        - end_bracket: )
      - raw: SELECT
      - raw: sum
      - bracketed:
          start_bracket: (
          raw: price
          end_bracket: )
      - raw: AS
      - raw: volume
      - comma: ','
      - raw: name
      - comma: ','
      - raw: store
      - raw: FROM
      - raw: tmp_view
      - raw: GROUP
      - raw: BY
      - raw: GROUPING
      - raw: SETS
      - bracketed:
        - start_bracket: (
        - raw: name
        - comma: ','
        - raw: store
        - comma: ','
        - bracketed:
            start_bracket: (
            end_bracket: )
        - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        unparsable:
          keyword: FROM
          bracketed:
          - start_bracket: (
          - raw: IMPORT
          - raw: INTO
          - bracketed:
            - start_bracket: (
            - raw: v
            - raw: VARCHAR
            - bracketed:
                start_bracket: (
                raw: '1'
                end_bracket: )
            - end_bracket: )
          - raw: FROM
          - raw: EXA
          - raw: AT
          - raw: my_connection
          - raw: TABLE
          - raw: sys
          - raw: .
          - raw: dual
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
          - identifier: aschema
          - dot: .
          - identifier: afunction
          unparsable:
            bracketed:
            - start_bracket: (
            - raw: "'hello'"
            - comma: ','
            - raw: '123'
            - end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
              - identifier: aschema
              - dot: .
              - identifier: mytable
      where_clause:
        unparsable:
        - keyword: WHERE
        - bracketed:
          - start_bracket: (
          - raw: a
          - comma: ','
          - raw: '2'
          - comma: ','
          - raw: substr
          - bracketed:
            - start_bracket: (
            - raw: c
            - comma: ','
            - raw: '1'
            - comma: ','
            - raw: '3'
            - end_bracket: )
          - end_bracket: )
        - raw: IN
        - bracketed:
          - start_bracket: (
          - raw: SELECT
          - raw: a
          - comma: ','
          - raw: b
          - comma: ','
          - raw: c
          - raw: FROM
          - raw: bschema
          - raw: .
          - raw: yourtable
          - end_bracket: )
- statement_terminator: ;
- statement:
    with_compound_statement:
      unparsable:
      - keyword: WITH
      - raw: mylist
      - raw: AS
      - bracketed:
        - start_bracket: (
        - raw: VALUES
        - bracketed:
          - start_bracket: (
          - raw: "'a'"
          - comma: ','
          - raw: "'b'"
          - comma: ','
          - raw: "'c'"
          - end_bracket: )
        - comma: ','
        - bracketed:
          - start_bracket: (
          - raw: "'d'"
          - comma: ','
          - raw: "'e'"
          - comma: ','
          - raw: "'f'"
          - end_bracket: )
        - comma: ','
        - bracketed:
          - start_bracket: (
          - raw: f1
          - bracketed:
              start_bracket: (
              raw: "'a'"
              end_bracket: )
          - comma: ','
          - raw: "'b'"
          - comma: ','
          - raw: "'d'"
          - end_bracket: )
        - raw: AS
        - raw: mylist
        - bracketed:
          - start_bracket: (
          - raw: a
          - comma: ','
          - raw: b
          - comma: ','
          - raw: c
          - end_bracket: )
        - end_bracket: )
      - raw: SELECT
      - raw: '*'
      - raw: from
      - raw: mylist
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          bare_function: rowid
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: ROW_NUMBER
          unparsable:
          - bracketed:
              start_bracket: (
              end_bracket: )
          - raw: OVER
          - bracketed:
            - start_bracket: (
            - raw: PARTITION
            - raw: BY
            - bracketed:
              - start_bracket: (
              - raw: col1
              - comma: ','
              - raw: col2
              - end_bracket: )
            - raw: ORDER
            - raw: BY
            - raw: col1
            - raw: DESC
            - comma: ','
            - raw: col2
            - raw: DESC
            - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          bare_function: rowid
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: ROW_NUMBER
          unparsable:
          - bracketed:
              start_bracket: (
              end_bracket: )
          - raw: OVER
          - bracketed:
            - start_bracket: (
            - raw: PARTITION
            - raw: BY
            - bracketed:
              - start_bracket: (
              - raw: col1
              - comma: ','
              - raw: col2
              - end_bracket: )
            - end_bracket: )
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - column_reference:
          identifier: col1
      - keyword: DESC
      - comma: ','
      - column_reference:
          identifier: col2
      - keyword: DESC
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: x
        with_invalid_unique_pk_clause:
          unparsable:
          - keyword: WITH
          - keyword: INVALID
          - keyword: UNIQUE
          - bracketed:
              start_bracket: (
              raw: myid
              end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        unparsable:
          keyword: FROM
          raw: values
          bracketed:
          - start_bracket: (
          - raw: "'x'"
          - comma: ','
          - raw: "'y'"
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        unparsable:
        - keyword: FROM
        - raw: values
        - bracketed:
          - start_bracket: (
          - raw: "'x'"
          - comma: ','
          - raw: "'y'"
          - end_bracket: )
        - raw: AS
        - raw: x
        - bracketed:
          - start_bracket: (
          - raw: c1
          - comma: ','
          - raw: c2
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        unparsable:
        - keyword: FROM
        - raw: values
        - bracketed:
          - start_bracket: (
          - bracketed:
            - start_bracket: (
            - raw: "'x'"
            - comma: ','
            - raw: "'2'"
            - end_bracket: )
          - comma: ','
          - bracketed:
            - start_bracket: (
            - raw: "'y'"
            - comma: ','
            - raw: "'2'"
            - end_bracket: )
          - end_bracket: )
        - raw: AS
        - raw: x
        - bracketed:
          - start_bracket: (
          - raw: c1
          - comma: ','
          - raw: c2
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        unparsable:
          keyword: FROM
          bracketed:
          - start_bracket: (
          - raw: VALUES
          - raw: '1'
          - comma: ','
          - raw: '2'
          - comma: ','
          - raw: '3'
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        unparsable:
        - keyword: FROM
        - bracketed:
          - start_bracket: (
          - raw: VALUES
          - raw: '1'
          - comma: ','
          - raw: '2'
          - comma: ','
          - raw: '3'
          - end_bracket: )
        - raw: AS
        - raw: xs
        - bracketed:
            start_bracket: (
            raw: n1
            end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              values_range_clause:
              - keyword: VALUES
              - keyword: BETWEEN
              - literal: '1'
              - binary_operator: AND
              - literal: '15'
              - keyword: WITH
              - keyword: STEP
              - literal: '4'
- statement_terminator: ;
- statement:
    select_statement:
    - keyword: SELECT
    - select_clause_element:
        column_reference:
          identifier: first_name
    - comma: ','
    - select_clause_element:
        column_reference:
          identifier: name
    - with_invalid_foreign_key_clause:
        unparsable:
        - keyword: WITH
        - keyword: INVALID
        - keyword: FOREIGN
        - keyword: KEY
        - bracketed:
            start_bracket: (
            raw: nr
            end_bracket: )
        - raw: from
        - raw: T1
        - raw: REFERENCING
        - raw: T2
        - bracketed:
            start_bracket: (
            raw: id
            end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      keyword: SELECT
      select_clause_element:
        wildcard_expression:
          wildcard_identifier:
            star: '*'
      with_invalid_foreign_key_clause:
        unparsable:
        - keyword: WITH
        - keyword: INVALID
        - keyword: FOREIGN
        - keyword: KEY
        - bracketed:
          - start_bracket: (
          - raw: first_name
          - comma: ','
          - raw: name
          - end_bracket: )
        - raw: from
        - raw: T1
        - raw: REFERENCING
        - raw: T2
- statement_terminator: ;
- statement:
    select_statement:
      keyword: SELECT
      with_invalid_foreign_key_clause:
        unparsable:
        - keyword: INVALID
        - keyword: FOREIGN
        - keyword: KEY
        - bracketed:
          - start_bracket: (
          - raw: nr
          - comma: ','
          - raw: first_name
          - comma: ','
          - raw: name
          - end_bracket: )
        - raw: from
        - raw: T1
        - raw: REFERENCING
        - raw: T2
        - bracketed:
          - start_bracket: (
          - raw: id
          - comma: ','
          - raw: first_name
          - comma: ','
          - raw: name
          - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
        into_table_clause:
        - keyword: INTO
        - keyword: TABLE
        - table_reference:
            identifier: t2
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: t1
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - literal: '1'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          keyword: date
          literal: "'2021-09-21'"
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: dual
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        with_invalid_unique_pk_clause:
          unparsable:
          - keyword: INVALID
          - keyword: PRIMARY
          - keyword: KEY
          - bracketed:
              start_bracket: (
              raw: first_name
              end_bracket: )
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: T1
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: JSON_EXTRACT
          unparsable:
          - bracketed:
            - start_bracket: (
            - raw: json_str
            - comma: ','
            - raw: "'$.\"@id\"'"
            - comma: ','
            - raw: "'$.error()'"
            - end_bracket: )
          - raw: EMITS
          - bracketed:
            - start_bracket: (
            - raw: id
            - raw: VARCHAR
            - bracketed:
                start_bracket: (
                raw: '2000'
                end_bracket: )
            - comma: ','
            - raw: error_column
            - raw: VARCHAR
            - bracketed:
                start_bracket: (
                raw: '2000000'
                end_bracket: )
            - end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
          - literal: '10'
          - binary_operator: /
          - literal: '2'
- statement_terminator: ;
