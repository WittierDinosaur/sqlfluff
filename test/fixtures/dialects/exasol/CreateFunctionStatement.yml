# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 57a005b21c72d94a6b7380595ff68da16919a3faca43b951cbfa001756e4ea68
file:
- statement:
    unparsable:
    - raw: CREATE
    - raw: OR
    - raw: REPLACE
    - raw: FUNCTION
    - raw: percentage
    - bracketed:
      - start_bracket: (
      - raw: fraction
      - raw: DECIMAL
      - comma: ','
      - raw: entirety
      - raw: DECIMAL
      - end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: IS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: res
    - walrus_operator: :=
    - bracketed:
      - start_bracket: (
      - raw: '100'
      - raw: '*'
      - raw: fraction
      - end_bracket: )
    - raw: /
    - raw: entirety
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
    - raw: '||'
    - raw: "' %'"
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: percentage
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: hello
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: res
    - walrus_operator: :=
    - raw: hello
    - raw: .
    - raw: world
    - bracketed:
        start_bracket: (
        raw: '"no"'
        end_bracket: )
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: "'HELLO'"
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: hello
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: case_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: res
    - walrus_operator: :=
    - raw: CASE
    - raw: WHEN
    - raw: input_variable
    - raw: <
    - raw: '0'
    - raw: THEN
    - raw: '0'
    - raw: ELSE
    - raw: input_variable
    - raw: END
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: case_function
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: assignment_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: res
    - walrus_operator: :=
    - raw: "'Hello World'"
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: assignment_function
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: if_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: IF
    - raw: input_variable
    - raw: '='
    - raw: '0'
    - raw: THEN
    - raw: res
    - walrus_operator: :=
    - raw: 'NULL'
- statement_terminator: ;
- statement:
    unparsable:
    - raw: ELSEIF
    - raw: input_variable
    - raw: '='
    - raw: '1'
    - raw: THEN
    - raw: res
    - walrus_operator: :=
    - raw: "'HELLO'"
- statement_terminator: ;
- statement:
    unparsable:
    - raw: ELSEIF
    - raw: input_variable
    - raw: '='
    - raw: '2'
    - raw: THEN
    - raw: res
    - walrus_operator: :=
    - raw: "'HALLO'"
- statement_terminator: ;
- statement:
    unparsable:
    - raw: ELSE
    - raw: res
    - walrus_operator: :=
    - raw: input_variable
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: IF
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: if_function
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: for_loop_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: FOR
    - raw: cnt
    - walrus_operator: :=
    - raw: '1'
    - raw: TO
    - raw: input_variable
    - raw: DO
    - raw: res
    - walrus_operator: :=
    - raw: res
    - raw: '*'
    - raw: '2'
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: FOR
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: for_loop_function
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: for_loop_function2
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: FOR
    - raw: cnt
    - raw: IN
    - raw: '1'
    - raw: ..
    - raw: '10'
    - raw: LOOP
    - raw: res
    - walrus_operator: :=
    - raw: res
    - raw: '*'
    - raw: '2'
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: LOOP
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: for_loop_function2
- statement_terminator: ;
- statement:
    unparsable:
    - function_script_terminator: /
    - raw: CREATE
    - raw: FUNCTION
    - raw: for_loop_function3
    - bracketed:
        start_bracket: (
        end_bracket: )
    - raw: RETURN
    - raw: VARCHAR
    - bracketed:
        start_bracket: (
        raw: '10'
        end_bracket: )
    - raw: AS
    - raw: res
    - raw: DECIMAL
- statement_terminator: ;
- statement:
    unparsable:
    - raw: BEGIN
    - raw: WHILE
    - raw: cnt
    - raw: <=
    - raw: input_variable
    - raw: DO
    - raw: res
    - walrus_operator: :=
    - raw: res
    - raw: '*'
    - raw: '2'
- statement_terminator: ;
- statement:
    unparsable:
    - raw: cnt
    - walrus_operator: :=
    - raw: cnt
    - raw: +
    - raw: '1'
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: WHILE
- statement_terminator: ;
- statement:
    unparsable:
    - raw: RETURN
    - raw: res
- statement_terminator: ;
- statement:
    unparsable:
    - raw: END
    - raw: for_loop_function3
- statement_terminator: ;
- statement:
    unparsable:
      function_script_terminator: /
