# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 377973ffcf4a1ad03e74e06e2371435f2a62b692ba7260935d9311272e0bdfc9
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: a
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: zendesk
          join_clause:
          - keyword: LEFT
          - keyword: JOIN
          - from_expression_element:
              table_expression:
                table_reference:
                  identifier: ticket
          - join_on_condition:
              keyword: 'ON'
              expression:
              - column_reference:
                - identifier: zendesk
                - dot: .
                - identifier: ticket_id
              - comparison_operator: '='
              - column_reference:
                - identifier: ticket
                - dot: .
                - identifier: id
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: low_user_counts
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: acceptable_buckets
          join_clause:
            keyword: JOIN
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: small_buckets
        unparsable:
        - raw: 'ON'
        - bracketed:
          - start_bracket: (
          - raw: business_type
          - raw: '='
          - raw: low_business_type
          - end_bracket: )
        - raw: AND
        - bracketed:
          - start_bracket: (
          - raw: business_type
          - raw: '='
          - raw: low_business_type
          - raw: OR
          - raw: size_label
          - raw: '='
          - raw: low_size_label
          - end_bracket: )
- statement_terminator: ;
