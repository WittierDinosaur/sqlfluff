# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 35bb1438173aadc2aab65708ba6aa3fa8ab8f61bc9a93f5c779e887c7cfd1c21
file:
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: add
      - bracketed:
        - start_bracket: (
        - raw: integer
        - comma: ','
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: AS
      - raw: "'select $1 + $2;'"
      - raw: LANGUAGE
      - raw: SQL
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: increment
      - bracketed:
        - start_bracket: (
        - raw: i
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: AS
      - raw: "'\n    BEGIN\n        RETURN i + 1;\n    END;\n'"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: VOLATILE
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: increment
      - bracketed:
        - start_bracket: (
        - raw: i
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: AS
      - raw: "'\n    BEGIN\n        RETURN i + 1;\n    END;\n'"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: WINDOW
      - raw: IMMUTABLE
      - raw: STABLE
      - raw: LEAKPROOF
      - raw: RETURNS
      - raw: 'NULL'
      - raw: 'ON'
      - raw: 'NULL'
      - raw: INPUT
      - raw: EXTERNAL
      - raw: SECURITY
      - raw: DEFINER
      - raw: ROWS
      - raw: '5'
      - raw: SET
      - raw: test_param
      - raw: '='
      - raw: '3'
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: increment
      - bracketed:
        - start_bracket: (
        - raw: i
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: AS
      - raw: "'C:\\\\my_file.c'"
      - comma: ','
      - raw: "'symlink_c'"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: WINDOW
      - raw: IMMUTABLE
      - raw: STABLE
      - raw: NOT
      - raw: LEAKPROOF
      - raw: CALLED
      - raw: 'ON'
      - raw: 'NULL'
      - raw: INPUT
      - raw: EXTERNAL
      - raw: SECURITY
      - raw: DEFINER
      - raw: COST
      - raw: '123'
      - raw: ROWS
      - raw: '5'
      - raw: SET
      - raw: test_param
      - raw: '='
      - raw: '3'
      - raw: WITH
      - bracketed:
          start_bracket: (
          raw: isStrict
          end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: increment
      - bracketed:
        - start_bracket: (
        - raw: i
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: PARALLEL
      - raw: UNSAFE
      - raw: AS
      - raw: "$$\n    BEGIN\n        RETURN i + 1;\n    END;\n$$"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: SUPPORT
      - raw: my_function
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: add
      - bracketed:
        - start_bracket: (
        - raw: integer
        - comma: ','
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: AS
      - raw: "'select $1 + $2;'"
      - raw: LANGUAGE
      - raw: SQL
      - raw: IMMUTABLE
      - raw: RETURNS
      - raw: 'NULL'
      - raw: 'ON'
      - raw: 'NULL'
      - raw: INPUT
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: increment
      - bracketed:
        - start_bracket: (
        - raw: i
        - raw: integer
        - end_bracket: )
      - raw: RETURNS
      - raw: integer
      - raw: AS
      - raw: "$$\n        BEGIN\n                RETURN i + 1;\n        END;\n$$"
      - raw: LANGUAGE
      - raw: plpgsql
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: dup
      - bracketed:
        - start_bracket: (
        - raw: in
        - raw: int
        - comma: ','
        - raw: out
        - raw: f1
        - raw: int
        - comma: ','
        - raw: out
        - raw: f2
        - raw: text
        - end_bracket: )
      - raw: AS
      - raw: "$$ SELECT $1, CAST($1 AS text) || ' is text' $$"
      - raw: LANGUAGE
      - raw: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: dup
        unparsable:
          bracketed:
            start_bracket: (
            raw: '42'
            end_bracket: )
- statement_terminator: ;
- statement:
    create_type_statement:
    - keyword: CREATE
    - keyword: TYPE
    - object_reference:
        identifier: dup_result
    - keyword: AS
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: f1
      - raw: int
      - comma: ','
      - raw: f2
      - raw: text
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: dup
      - bracketed:
          start_bracket: (
          raw: int
          end_bracket: )
      - raw: RETURNS
      - raw: dup_result
      - raw: AS
      - raw: "$$ SELECT $1, CAST($1 AS text) || ' is text' $$"
      - raw: LANGUAGE
      - raw: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: dup
        unparsable:
          bracketed:
            start_bracket: (
            raw: '42'
            end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: dup
      - bracketed:
          start_bracket: (
          raw: int
          end_bracket: )
      - raw: RETURNS
      - raw: TABLE
      - bracketed:
        - start_bracket: (
        - raw: f1
        - raw: int
        - comma: ','
        - raw: f2
        - raw: text
        - end_bracket: )
      - raw: AS
      - raw: "$$ SELECT $1, CAST($1 AS text) || ' is text' $$"
      - raw: LANGUAGE
      - raw: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: dup
        unparsable:
          bracketed:
            start_bracket: (
            raw: '42'
            end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: check_password
      - bracketed:
        - start_bracket: (
        - raw: uname
        - raw: TEXT
        - comma: ','
        - raw: pass
        - raw: TEXT
        - end_bracket: )
      - raw: RETURNS
      - raw: BOOLEAN
      - raw: AS
      - raw: "$$\nDECLARE passed BOOLEAN;\nBEGIN\n        SELECT  (pwd = $2) INTO\
          \ passed\n        FROM    pwds\n        WHERE   username = $1;\n\n     \
          \   RETURN passed;\nEND;\n$$"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: SECURITY
      - raw: DEFINER
      - raw: SET
      - raw: search_path
      - raw: '='
      - raw: admin
      - comma: ','
      - raw: pg_temp
- statement_terminator: ;
- statement:
    transaction_statement:
      keyword: BEGIN
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - keyword: FUNCTION
      - raw: check_password
      - bracketed:
        - start_bracket: (
        - raw: uname
        - raw: TEXT
        - comma: ','
        - raw: pass
        - raw: TEXT
        - end_bracket: )
      - raw: RETURNS
      - raw: BOOLEAN
      - raw: AS
      - raw: "$$\nDECLARE passed BOOLEAN;\nBEGIN\n        SELECT  (pwd = $2) INTO\
          \ passed\n        FROM    pwds\n        WHERE   username = $1;\n\n     \
          \   RETURN passed;\nEND;\n$$"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: SECURITY
      - raw: DEFINER
- statement_terminator: ;
- statement:
    unparsable:
    - raw: REVOKE
    - raw: ALL
    - raw: 'ON'
    - raw: FUNCTION
    - raw: check_password
    - bracketed:
      - start_bracket: (
      - raw: uname
      - raw: TEXT
      - comma: ','
      - raw: pass
      - raw: TEXT
      - end_bracket: )
    - raw: FROM
    - raw: PUBLIC
- statement_terminator: ;
- statement:
    unparsable:
    - raw: GRANT
    - raw: EXECUTE
    - raw: 'ON'
    - raw: FUNCTION
    - raw: check_password
    - bracketed:
      - start_bracket: (
      - raw: uname
      - raw: TEXT
      - comma: ','
      - raw: pass
      - raw: TEXT
      - end_bracket: )
    - raw: TO
    - raw: admins
- statement_terminator: ;
- statement:
    transaction_statement:
      keyword: COMMIT
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: public
      - raw: .
      - raw: setof_test
      - bracketed:
          start_bracket: (
          end_bracket: )
      - raw: RETURNS
      - raw: SETOF
      - raw: text
      - raw: LANGUAGE
      - raw: sql
      - raw: STABLE
      - raw: STRICT
      - raw: AS
      - raw: "$function$\nselect unnest(array['hi', 'test'])\n$function$"
- statement_terminator: ;
- statement:
    create_function_statement:
      unparsable:
      - keyword: CREATE
      - binary_operator: OR
      - keyword: REPLACE
      - keyword: FUNCTION
      - raw: public
      - raw: .
      - raw: foo
      - bracketed:
        - start_bracket: (
        - raw: _a
        - raw: TEXT
        - comma: ','
        - raw: _$b
        - raw: INT
        - end_bracket: )
      - raw: RETURNS
      - raw: FLOAT
      - raw: AS
      - raw: "$$\n  RETURN 0.0\n$$"
      - raw: LANGUAGE
      - raw: plpgsql
      - raw: STABLE
      - raw: PARALLEL
      - raw: SAFE
- statement_terminator: ;
