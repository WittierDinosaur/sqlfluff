# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: a48d440fe45b55c4efb4637d1f6d050933e301c2e85186871466fe13f044e99d
file:
- statement:
    analyze_statement:
      keyword: ANALYZE
      table_reference:
        identifier: foo
- statement_terminator: ;
- statement:
    analyze_statement:
      keyword: ANALYSE
      table_reference:
        identifier: foo
- statement_terminator: ;
- statement:
    analyze_statement:
    - keyword: ANALYZE
    - keyword: VERBOSE
    - table_reference:
        identifier: foo
- statement_terminator: ;
- statement:
    analyze_statement:
      keyword: ANALYZE
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: VERBOSE
      - comma: ','
      - raw: SKIP_LOCKED
      - end_bracket: )
      raw: foo
- statement_terminator: ;
- statement:
    analyze_statement:
      keyword: ANALYZE
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: VERBOSE
      - raw: 'FALSE'
      - comma: ','
      - raw: SKIP_LOCKED
      - raw: 'TRUE'
      - end_bracket: )
      raw: foo
- statement_terminator: ;
- statement:
    analyze_statement:
      keyword: ANALYZE
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: SKIP_LOCKED
      - comma: ','
      - raw: VERBOSE
      - raw: 'FALSE'
      - end_bracket: )
      raw: foo
- statement_terminator: ;
- statement:
    analyze_statement:
    - keyword: ANALYZE
    - keyword: VERBOSE
    - table_reference:
        identifier: foo
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: bar
      - comma: ','
      - raw: bat
      - end_bracket: )
- statement_terminator: ;
- statement:
    analyze_statement:
      keyword: ANALYZE
      table_reference:
        identifier: foo
    unparsable:
    - bracketed:
      - start_bracket: (
      - raw: bar
      - comma: ','
      - raw: bat
      - end_bracket: )
    - comma: ','
    - raw: foo2
    - bracketed:
      - start_bracket: (
      - raw: bar2
      - comma: ','
      - raw: bat2
      - end_bracket: )
- statement_terminator: ;
