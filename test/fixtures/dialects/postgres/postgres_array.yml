# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 6c9ae8cbebc05501250220631dcc46615626f39a09decab9e69dd9a46d31f54e
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
          - keyword: ARRAY
          - array_contents_grammar:
              simple_array_contents_grammar:
              - start_square_bracket: '['
              - literal: '1'
              - comma: ','
              - literal: '2'
              - end_square_bracket: ']'
          - binary_operator: '||'
          - keyword: ARRAY
          - array_contents_grammar:
              simple_array_contents_grammar:
              - start_square_bracket: '['
              - literal: '3'
              - comma: ','
              - literal: '4'
              - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          keyword: ARRAY
          array_contents_grammar:
          - start_square_bracket: '['
          - array_contents_grammar:
              simple_array_contents_grammar:
              - start_square_bracket: '['
              - literal: "'meeting'"
              - comma: ','
              - literal: "'lunch'"
              - end_square_bracket: ']'
          - comma: ','
          - array_contents_grammar:
              simple_array_contents_grammar:
              - start_square_bracket: '['
              - literal: "'training'"
              - comma: ','
              - literal: "'presentation'"
              - end_square_bracket: ']'
          - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    unparsable:
    - raw: CREATE
    - raw: TABLE
    - raw: sal_emp
    - bracketed:
      - start_bracket: (
      - raw: name
      - raw: text
      - comma: ','
      - raw: pay_by_quarter
      - raw: integer
      - start_square_bracket: '['
      - end_square_bracket: ']'
      - comma: ','
      - raw: schedule
      - raw: text
      - start_square_bracket: '['
      - end_square_bracket: ']'
      - start_square_bracket: '['
      - end_square_bracket: ']'
      - end_bracket: )
- statement_terminator: ;
- statement:
    unparsable:
    - raw: CREATE
    - raw: TABLE
    - raw: tictactoe
    - bracketed:
      - start_bracket: (
      - raw: squares
      - raw: integer
      - start_square_bracket: '['
      - raw: '3'
      - end_square_bracket: ']'
      - start_square_bracket: '['
      - raw: '3'
      - end_square_bracket: ']'
      - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sal_emp
      where_clause:
        keyword: WHERE
        expression:
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '1'
            end_square_bracket: ']'
        - comparison_operator: '='
        - literal: '10000'
        - binary_operator: OR
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '2'
            end_square_bracket: ']'
        - comparison_operator: '='
        - literal: '10000'
        - binary_operator: OR
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '3'
            end_square_bracket: ']'
        - comparison_operator: '='
        - literal: '10000'
        - binary_operator: OR
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '4'
            end_square_bracket: ']'
        - comparison_operator: '='
        - literal: '10000'
- statement_terminator: ;
- statement:
    insert_statement:
      unparsable:
      - keyword: INSERT
      - raw: INTO
      - raw: sal_emp
      - raw: VALUES
      - bracketed:
        - start_bracket: (
        - raw: "'Bill'"
        - comma: ','
        - raw: ARRAY
        - start_square_bracket: '['
        - raw: '10000'
        - comma: ','
        - raw: '10000'
        - comma: ','
        - raw: '10000'
        - comma: ','
        - raw: '10000'
        - end_square_bracket: ']'
        - comma: ','
        - raw: ARRAY
        - start_square_bracket: '['
        - start_square_bracket: '['
        - raw: "'meeting'"
        - comma: ','
        - raw: "'lunch'"
        - end_square_bracket: ']'
        - comma: ','
        - start_square_bracket: '['
        - raw: "'training'"
        - comma: ','
        - raw: "'presentation'"
        - end_square_bracket: ']'
        - end_square_bracket: ']'
        - end_bracket: )
- statement_terminator: ;
- statement:
    insert_statement:
      unparsable:
      - keyword: INSERT
      - raw: INTO
      - raw: sal_emp
      - raw: VALUES
      - bracketed:
        - start_bracket: (
        - raw: "'Carol'"
        - comma: ','
        - raw: ARRAY
        - start_square_bracket: '['
        - raw: '20000'
        - comma: ','
        - raw: '25000'
        - comma: ','
        - raw: '25000'
        - comma: ','
        - raw: '25000'
        - end_square_bracket: ']'
        - comma: ','
        - raw: ARRAY
        - start_square_bracket: '['
        - start_square_bracket: '['
        - raw: "'breakfast'"
        - comma: ','
        - raw: "'consulting'"
        - end_square_bracket: ']'
        - comma: ','
        - start_square_bracket: '['
        - raw: "'meeting'"
        - comma: ','
        - raw: "'lunch'"
        - end_square_bracket: ']'
        - end_square_bracket: ']'
        - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: name
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sal_emp
      where_clause:
        keyword: WHERE
        expression:
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '1'
            end_square_bracket: ']'
        - comparison_operator: <>
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '2'
            end_square_bracket: ']'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: schedule
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - slice: ':'
          - literal: '2'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - literal: '1'
          - slice: ':'
          - literal: '1'
          - end_square_bracket: ']'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sal_emp
      where_clause:
        keyword: WHERE
        expression:
          column_reference:
            identifier: name
          comparison_operator: '='
          literal: "'Bill'"
- statement_terminator: ;
- statement:
    update_statement:
      keyword: UPDATE
      table_reference:
        identifier: sal_emp
      set_clause_list:
        keyword: SET
        set_clause:
          column_reference:
            identifier: pay_by_quarter
          array_accessor:
            start_square_bracket: '['
            literal: '4'
            end_square_bracket: ']'
          comparison_operator: '='
          literal: '15000'
      where_clause:
        keyword: WHERE
        expression:
          column_reference:
            identifier: name
          comparison_operator: '='
          literal: "'Bill'"
- statement_terminator: ;
- statement:
    update_statement:
      keyword: UPDATE
      table_reference:
        identifier: sal_emp
      set_clause_list:
        keyword: SET
        set_clause:
          column_reference:
            identifier: pay_by_quarter
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - slice: ':'
          - literal: '2'
          - end_square_bracket: ']'
          comparison_operator: '='
          literal: "'{27000,27000}'"
      where_clause:
        keyword: WHERE
        expression:
          column_reference:
            identifier: name
          comparison_operator: '='
          literal: "'Carol'"
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: array_dims
          unparsable:
            bracketed:
            - start_bracket: (
            - raw: ARRAY
            - start_square_bracket: '['
            - raw: '1'
            - comma: ','
            - raw: '2'
            - end_square_bracket: ']'
            - raw: '||'
            - raw: ARRAY
            - start_square_bracket: '['
            - raw: '3'
            - comma: ','
            - raw: '4'
            - comma: ','
            - raw: '5'
            - end_square_bracket: ']'
            - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: array_dims
          unparsable:
            bracketed:
            - start_bracket: (
            - raw: ARRAY
            - start_square_bracket: '['
            - raw: '1'
            - comma: ','
            - raw: '2'
            - end_square_bracket: ']'
            - raw: '||'
            - raw: ARRAY
            - start_square_bracket: '['
            - start_square_bracket: '['
            - raw: '3'
            - comma: ','
            - raw: '4'
            - end_square_bracket: ']'
            - comma: ','
            - start_square_bracket: '['
            - raw: '5'
            - comma: ','
            - raw: '6'
            - end_square_bracket: ']'
            - end_square_bracket: ']'
            - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            keyword: ARRAY
            array_contents_grammar:
              simple_array_contents_grammar:
              - start_square_bracket: '['
              - literal: '1'
              - comma: ','
              - literal: '2'
              - end_square_bracket: ']'
            binary_operator: '||'
            literal: "'{3, 4}'"
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: array_position
          unparsable:
            bracketed:
            - start_bracket: (
            - raw: ARRAY
            - start_square_bracket: '['
            - raw: "'sun'"
            - comma: ','
            - raw: "'mon'"
            - comma: ','
            - raw: "'tue'"
            - comma: ','
            - raw: "'wed'"
            - comma: ','
            - raw: "'thu'"
            - comma: ','
            - raw: "'fri'"
            - comma: ','
            - raw: "'sat'"
            - end_square_bracket: ']'
            - comma: ','
            - raw: "'mon'"
            - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: f1
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - numeric_literal:
              binary_operator: '-'
              literal: '2'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - literal: '3'
          - end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: e1
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: f1
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - numeric_literal:
              binary_operator: '-'
              literal: '1'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - literal: '5'
          - end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: e2
      from_clause:
        unparsable:
        - keyword: FROM
        - bracketed:
          - start_bracket: (
          - raw: SELECT
          - raw: "'[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'"
          - raw: '::'
          - raw: int
          - start_square_bracket: '['
          - end_square_bracket: ']'
          - raw: AS
          - raw: f1
          - end_bracket: )
        - raw: AS
        - raw: ss
- statement_terminator: ;
